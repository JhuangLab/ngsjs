#!/usr/bin/env Rscript
# Author: Jianfeng Li
# Email: lee_jianfeng@sjtu.edu.cn
# Year: 2018
# Homepage: https://github.com/ngsjs/ngsjs
# License: MIT
# Copyrights 2018 Jianfeng All Rights Reserved.
suppressMessages(if(!require('pacman')) install.packages('pacman'))
pkgs <- c("optparse", "ngstk")
suppressMessages(pacman::p_load(pkgs, character.only = TRUE))

option_list <- list(
  make_option(c("-v", "--verbose"), action = "store_true", default = FALSE, help = "Print extra output [default FALSE]"), 
  make_option(c("-f", "--func"), help = "Index or name of used function [e.g. stringi::stri_rand_strings (1).", 
              default = "stringi::stri_rand_strings"),
  make_option(c("-n", "--num"), help = "Counts of random strings [1].", default = 1), 
  make_option(c("-l", "--length"), help = "Length of one of random string [20].", default = 20), 
  make_option(c("-p", "--pattern"), help = "Character vector specifying character classes to draw elements ['[A-Za-z0-9]'].", default = "[A-Za-z0-9]"), 
  make_option(c("-r", "--rfunc"), help = "R function (input param 'x') to process the returned colors or length [e.g. function(x){return(x[[2]])} or x[[2]]].", 
  default = NULL),
  make_option(c("-e", "--extra"), help = "Extra parameters [...].", default = ""),
  make_option(c("-d", "--doc"), action = "store_true", default = FALSE, help = "Print functions document")
)

description <- sprintf("Description:\n%s", 
                       "ranystr is an R-based tool to generate any counts and any length random strings.")
usage <- paste("%prog [options] [params]",
                "%prog",
                "%prog -l 30",
                "%prog -l 20 -n 3",
                sep = "\n")
opt_parser_obj <- OptionParser(option_list = option_list,
                        usage = usage, description = description) 
opt <- parse_args(opt_parser_obj, positional_arguments = TRUE) 
opt_args <- opt$args
opt <- opt$option
if (opt[["length"]] == "" && length(opt_args) > 0) opt[["length"]] <- opt_args[1]
if (!is.null(opt[["rfunc"]]) && length(opt_args) > 1) opt[["rfunc"]] <- opt_args[2]

if (opt[["length"]] == "" && !opt[["doc"]]) {
  print_help(opt_parser_obj)
} else {
  length <- as.numeric(opt[["length"]])
  n <- as.numeric(opt[["num"]])
  pattern <- opt[["pattern"]]
  if (opt[["extra"]] != "") {
    cmd_text <- sprintf("params <- list(length = length, n = n, pattern = pattern, %s)", opt[["extra"]])
  } else {
    cmd_text <- sprintf("params <- list(length = length, n = n, pattern = pattern)")
  }
  eval(parse(text = cmd_text))
  predefined_funcs <- list("1"="stringi::stri_rand_strings") 
  if (opt[["func"]] %in% names(predefined_funcs)) {
    predefined_func <- predefined_funcs[[ opt[["func"]] ]]
    if (length(grep("::|:::", opt[["func"]])) > 0) {
      dep_pkg <- strsplit(predefined_func, "::|:::")[[1]][1]
      suppressWarnings(suppressMessages(pacman::p_load(dep_pkg, character.only = TRUE)))
    }
    opt[["func"]] <- predefined_func
  }
  if (opt[["doc"]]) {
    eval(parse(text = sprintf("?%s", opt[["func"]])))
  } else {
    eval(parse(text = sprintf("x <- do.call(%s, params)", opt[["func"]])))
    is.function <- length(grep("function", opt[["rfunc"]])) > 0
    if (is.character(opt[["rfunc"]]) && !is.function) {
      opt[["rfunc"]] <- sprintf("function(x) {%s}", opt[["rfunc"]])
    }
    if (is.character(opt[["rfunc"]]))
      x <- do.call(eval(parse(text = opt$rfunc)), list(x=x))
    if (is.character(x) || is.numeric(x)) cat(paste(x, collapse = "\n"), sep = "\n")
    else x
  }
}
